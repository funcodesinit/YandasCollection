 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int // Removed @map("id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  phoneNumber   String    @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  firstName     String?
  lastName      String?
  password      String?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  // Relations
  customerProfile CustomerProfile?
  staffProfile    StaffProfile?
  carts           Cart[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model CustomerProfile {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  address String?
  orders  Order[]
  user    User    @relation(fields: [userId], references: [id])
}

model StaffProfile {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  position String?
  user     User    @relation(fields: [userId], references: [id])
}

model Order {
  id              Int             @id @default(autoincrement())
  product         String
  quantity        Int
  price           Float
  customerId      Int
  status          OrderStatus     @default(PENDING)
  returnRequested Boolean         @default(false)
  createdAt       DateTime        @default(now())
  customer        CustomerProfile @relation(fields: [customerId], references: [id])
}


//category 
model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[] // One category can have many products
}

model ProductRating {
  id         Int       @id @default(autoincrement())
  userId     Int
  productId  Int
  review     String?
  rate       Float

  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)

}


//add category and isPublished
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  rating      Float?      @default(0)
  discount    Int?     @default(0)
  isPub       Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ratings     ProductRating[]
  favourite   User[]
  cartItems   CartItem[]
  images      ProductImage[]

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}



model ProductImage {
  id         Int    @id @default(autoincrement())
  productId  Int
  sizeId     Int // Foreign key to ProductSize
  colorCode  String
  name       String
  image1     String
  image2     String
  image3     String
  image4     String
    
  stock      ProductStock[]

  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  size       ProductSize @relation("ProductImageToSize", fields: [sizeId], references: [id], onDelete: Cascade) // Named relation for size
  CartItem   CartItem?   @relation(fields: [cartItemId], references: [id])
  cartItemId Int?
}

model ProductStock {

  id              Int            @id @default(autoincrement())
  stock           Int            @default(1)
  productImageId  Int
  sizeId          Int?

  size            ProductSize?   @relation(fields: [sizeId], references: [id])
  ProductImage    ProductImage   @relation(fields: [productImageId], references: [id], onDelete: Cascade)

}

model ProductSize {
  id    Int     @id @default(autoincrement())
  size  String
  range String?
  productStockId Int?

  ProductStock  ProductStock @relation(fields: [productStockId], references: [id])
  productImages ProductImage[] @relation("ProductImageToSize") // Match the relation name here
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int @default(1)

  productImages ProductImage[]

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum Role {
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  RETURNED
  CANCELLED
}
